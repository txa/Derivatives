Quotient containers & their derivatives

Def: A quotient container "S <G| P" is given by
     S : Set
     P : S -> Set
     G : (s : S) (Iso (P s)) -> Prop

     s.t. G s is a subgroup in Iso (P s), i.e.
     G id
     G f , G g -> G (f o g)
     G f -> G (f^-1)

The extension of a quotient container is 
    [| S <G| P |] X = Sigma s : S. (P s -> X)/~s
where ~s is the least equivalence relation generated by:
	f ~ f o pi for G s pi

Alternative definition (using groupoids):
Def: A quotient container "SS <| PP" is given by
	    SS : sekeletal Groupoid
	    PP : SS -> Set (functor)

A skeletal groupoid is one where SS(s,s') is empty if s!=s'.

The extension is

    [| SS |> PP |] X = \Int^(s : SS) PP s -> X

Prop : The two definitions are equivalent.
Proof sketch:
   * S <G| P => SS <| PP:

     |SS| = S
      SS(s,s) = { pi : Iso(P s) | G s pi }

      PP s = P s
      PP pi = pi

   *  SS <| PP => S <G| P

      S = |SS|
      P s = PP s

      G s pi = exists s : SS(s,s) . pi = P s

[Todo : check that the translation preserve the meaning (upto iso).]

Discussion: Can we give up the skeletal condition in the groupoid based definition?
The problem is that going back to to the original definition doesn't see to be constructively possible, since we need to construct the skeleton of a groupoid. 
Also it is not clear how to prove an analogue of the theorem that any functor is a coproduct since we need to extract the groupoid and not just the set of shapes.

Morphisms of groupoids:

Lemma : [| SS |> PP |] -> \Int_(s : SS). F ( P s)
Proof:
     \Int_X . [| SS |> PP |] X -> F X
     =  \Int_X . (\Int^(s : SS) (PP s) -> X) -> F X
     ~ \Int_(s : SS) \Int_X. (PP s) -> X) -> F X		| curry, commute ends.
     ~ \Int_(s : SS) F (PP s)						| Yoneda

Def: We define the category QCont with objects quotient containers and 
     morphisms:
     QCont( SS <| PP, TT <| Q)
     = \Int_(s : SS)  [| TT <| QQ|] (PP s)
     = \Int_(s : SS) \Int^(t : TT) (QQ t) -> (PP s)
     [Todo: define identity and composition, extend evaluation]
     [Todo: Check equivalence with old defn]
     
Prop: [| _ |] : QCont -> Set is full and faithful
Proof: by construction using the lemma.

Closure under coproducts and products 
(actually we should be able to show colimits and limits).
